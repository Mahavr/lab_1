{"mappings":"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","sources":["src/js/secondLab.js"],"sourcesContent":["const form = document.querySelector('#form');\nconst results = document.querySelector('.results');\nlet result = [];\n\nfunction onSubmit(e) {\n  e.preventDefault();\n  //   console.log(e);\n  const option = e.target[0].value;\n  const universalArr = e.target[1].value.split(',');\n  const firstArr = e.target[2].value.split(',');\n  const secondArr = e.target[3].value.split(',');\n\n  selectType(option, firstArr, secondArr, universalArr);\n}\n\nform.addEventListener('submit', onSubmit);\nfunction converToBit(universalArr, arr) {\n  let resultArr = [];\n  //   let test = universalArr.map(el => arr.includes(el));\n  //   for (const el of test) {\n  //     if (el) {\n  //       resultArr.push(1);\n  //     } else {\n  //       resultArr.push(0);\n  //     }\n  //     }\n  for (const el of universalArr) {\n    resultArr.push(arr.includes(el) ? 1 : 0);\n  }\n  return resultArr;\n}\n\nfunction selectType(option, arrA, arrB, universalArr) {\n  firstArr = converToBit(universalArr, arrA);\n  secondArr = converToBit(universalArr, arrB);\n  switch (option) {\n    case 'union':\n      result = firstArr.map((value, index) => value | secondArr[index]);\n      //   for (let i = 0; i < a.length; i++) {\n      //     result[i] = a[i] | b[i];\n      //   }\n      addMarkup(result, universalArr);\n      break;\n    case 'intersection':\n      result = firstArr.map((value, index) => value & secondArr[index]);\n      addMarkup(result, universalArr);\n      break;\n\n    case 'difference':\n      result = firstArr.map((value, index) => value & !secondArr[index]);\n      addMarkup(result, universalArr);\n      break;\n    case 'symdiff':\n      result = firstArr.map((value, index) => value ^ secondArr[index]);\n      addMarkup(result, universalArr);\n      break;\n    case 'cartesianProd':\n      result = [];\n      // for (let i = 0; i < universalArr.length; i++) {\n      //   let row = [];\n      //   for (let j = 0; j < universalArr.length; j++) {\n      //     row.push([firstArr[i] * secondArr[j]]);\n      //   }\n      //   result.push(row);\n      // }\n      // firstArr.forEach(elementA => {\n      //   secondArr.forEach(elementB => {\n      //     result.push([elementA, elementB]);\n      //   });\n      // });\n      firstArr.forEach(elementA => {\n        let pairsArr = [];\n        secondArr.forEach(elementB => {\n          pairsArr.push([elementA, elementB]);\n        });\n        result.push(pairsArr);\n      });\n      // console.log(JSON.stringify(result));\n      cartesianMarkup(result, arrA, arrB);\n\n      break;\n    default:\n      console.log('Invalid subscription type');\n  }\n}\nfunction converToNum(res, arru) {\n  // let indices = [];\n  // for (let i = 0; i < arr.length; i++) {\n  //   if (arr[i] === 1) {\n  //     indices.push(i);\n  //   }\n  // }\n  // return indices;\n  return res.reduce((result, value, index) => {\n    if (value === 1) {\n      result.push(arru[index]);\n    }\n    return result;\n  }, []);\n}\nfunction cartesianConvert(result, firstArr, secondArr) {\n  let result2 = [];\n  console.log(JSON.stringify(result2));\n  for (let i = 0; i < result.length; i++) {\n    let row = [];\n    for (let j = 0; j < result[i].length; j++) {\n      let multipliedArr = [];\n      if (firstArr[i] == undefined || secondArr[j] == undefined) {\n        break;\n      } else {\n        multipliedArr[0] = firstArr[i];\n        multipliedArr[1] = secondArr[j];\n      }\n      multipliedArr.length < 2 ? stop : row.push(multipliedArr);\n    }\n    row.length < 2 ? stop : result2.push(row);\n  }\n\n  return result2;\n}\n\nfunction cartesianMarkup(result, firstArr, secondArr) {\n  let result2 = cartesianConvert(result, firstArr, secondArr);\n\n  let markup = '';\n  let rowString = '<p>[</p>\\n';\n  result2.forEach(function (subarray) {\n    markup += '  <p>[' + subarray.join(', ') + '],</p>\\n';\n  });\n  rowString += '<p>],</p>';\n  results.innerHTML = markup;\n}\nfunction addMarkup(resultt, arru) {\n  result = converToNum(resultt, arru);\n  let markup = '';\n  if (result == undefined) {\n    markup = `<p>\"Введіть дані\"/p>`;\n  }\n  markup = `<p>${result.join(',')}</p>`;\n\n  results.innerHTML = markup;\n}\n"],"names":["$0adc3aff4c116d4c$var$form","document","querySelector","$0adc3aff4c116d4c$var$results","$0adc3aff4c116d4c$var$result","$0adc3aff4c116d4c$var$converToBit","universalArr","arr","resultArr","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","el","value","push","includes","err","return","$0adc3aff4c116d4c$var$selectType","option","arrA","arrB","firstArr","secondArr","$0adc3aff4c116d4c$var$addMarkup","map","index","forEach","elementA","pairsArr","elementB","result4","result2","result3","console","log","JSON","stringify","i","length","row","j","multipliedArr","stop","$0adc3aff4c116d4c$var$cartesianConvert","markup","subarray","join","innerHTML","$0adc3aff4c116d4c$var$cartesianMarkup","resultt","arru","res","reduce","result1","$0adc3aff4c116d4c$var$converToNum","concat","addEventListener","e","preventDefault","target","split"],"version":3,"file":"secondLab.36bbdfc4.js.map"}