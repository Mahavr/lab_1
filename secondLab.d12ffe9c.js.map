{"mappings":"AAAA,MAAMA,EAAOC,SAASC,cAAc,SAC9BC,EAAUF,SAASC,cAAc,YACvC,IAAIE,EAAS,GAcb,SAASC,EAAYC,EAAcC,GACjC,IAAIC,EAAY,GAShB,IAAK,MAAMC,KAAMH,EACfE,EAAUE,KAAKH,EAAII,SAASF,GAAM,EAAI,GAExC,OAAOD,C,CAGT,SAASI,EAAWC,EAAQC,EAAMC,EAAMT,GAGtC,OAFAU,SAAWX,EAAYC,EAAcQ,GACrCG,UAAYZ,EAAYC,EAAcS,GAC9BF,GACN,IAAK,QACHT,EAASY,SAASE,KAAI,CAACC,EAAOC,IAAUD,EAAQF,UAAUG,KAI1DC,EAAUjB,EAAQE,GAClB,MACF,IAAK,eACHF,EAASY,SAASE,KAAI,CAACC,EAAOC,IAAUD,EAAQF,UAAUG,KAC1DC,EAAUjB,EAAQE,GAClB,MAEF,IAAK,aACHF,EAASY,SAASE,KAAI,CAACC,EAAOC,IAAUD,GAASF,UAAUG,KAC3DC,EAAUjB,EAAQE,GAClB,MACF,IAAK,UACHF,EAASY,SAASE,KAAI,CAACC,EAAOC,IAAUD,EAAQF,UAAUG,KAC1DC,EAAUjB,EAAQE,GAClB,MACF,IAAK,gBACHF,EAAS,GAaTY,SAASM,SAAQC,IACf,IAAIC,EAAW,GACfP,UAAUK,SAAQG,IAChBD,EAASd,KAAK,CAACa,EAAUE,GAAU,IAErCrB,EAAOM,KAAKc,EAAS,IA8C7B,SAAyBE,EAAQV,EAAUC,GACzC,IAAIU,EAtBN,SAA0BC,EAAQZ,EAAUC,GAC1C,IAAIU,EAAU,GACdE,QAAQC,IAAIC,KAAKC,UAAUL,IAC3B,IAAK,IAAIM,EAAI,EAAGA,EAAIL,EAAOM,OAAQD,IAAK,CACtC,IAAIE,EAAM,GACV,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAAOK,GAAGC,OAAQE,IAAK,CACzC,IAAIC,EAAgB,GACpB,GAAmBC,MAAftB,EAASiB,IAAmCK,MAAhBrB,EAAUmB,GACxC,MAEAC,EAAc,GAAKrB,EAASiB,GAC5BI,EAAc,GAAKpB,EAAUmB,GAE/BC,EAAcH,OAAS,EAAIK,KAAOJ,EAAIzB,KAAK2B,E,CAE7CF,EAAID,OAAS,EAAIK,KAAOZ,EAAQjB,KAAKyB,E,CAGvC,OAAOR,C,CAIOa,CAAiBd,EAAQV,EAAUC,GAE7CwB,EAAS,GACTC,EAAY,aAChBf,EAAQL,SAAQ,SAAUqB,GACxBF,GAAU,SAAWE,EAASC,KAAK,MAAQ,U,IAE7CF,GAAa,YACbvC,EAAQ0C,UAAYJ,C,CApDhBK,CAAgB1C,EAAQU,EAAMC,GAE9B,MACF,QACEc,QAAQC,IAAI,6B,CAkDlB,SAAST,EAAU0B,EAASC,GAC1B5C,EAhDF,SAAqB6C,EAAKD,GAQxB,OAAOC,EAAIC,QAAO,CAACC,EAAQhC,EAAOC,KAClB,IAAVD,GACFgC,EAAOzC,KAAKsC,EAAK5B,IAEZ+B,IACN,G,CAmCMC,CAAYL,EAASC,GAC9B,IAAIP,EAAS,GACCH,MAAVlC,IACFqC,EAAS,wBAEXA,EAAS,MAAMrC,EAAOwC,KAAK,WAE3BzC,EAAQ0C,UAAYJ,C,CA7HtBzC,EAAKqD,iBAAiB,UAXtB,SAAkBC,GAChBA,EAAEC,iBAEF,MAAM1C,EAASyC,EAAEE,OAAO,GAAGrC,MACrBb,EAAegD,EAAEE,OAAO,GAAGrC,MAAMsC,MAAM,KAI7C7C,EAAWC,EAHMyC,EAAEE,OAAO,GAAGrC,MAAMsC,MAAM,KACvBH,EAAEE,OAAO,GAAGrC,MAAMsC,MAAM,KAEFnD,E","sources":["src/js/secondLab.js"],"sourcesContent":["const form = document.querySelector('#form');\nconst results = document.querySelector('.results');\nlet result = [];\n\nfunction onSubmit(e) {\n  e.preventDefault();\n  //   console.log(e);\n  const option = e.target[0].value;\n  const universalArr = e.target[1].value.split(',');\n  const firstArr = e.target[2].value.split(',');\n  const secondArr = e.target[3].value.split(',');\n\n  selectType(option, firstArr, secondArr, universalArr);\n}\n\nform.addEventListener('submit', onSubmit);\nfunction converToBit(universalArr, arr) {\n  let resultArr = [];\n  //   let test = universalArr.map(el => arr.includes(el));\n  //   for (const el of test) {\n  //     if (el) {\n  //       resultArr.push(1);\n  //     } else {\n  //       resultArr.push(0);\n  //     }\n  //     }\n  for (const el of universalArr) {\n    resultArr.push(arr.includes(el) ? 1 : 0);\n  }\n  return resultArr;\n}\n\nfunction selectType(option, arrA, arrB, universalArr) {\n  firstArr = converToBit(universalArr, arrA);\n  secondArr = converToBit(universalArr, arrB);\n  switch (option) {\n    case 'union':\n      result = firstArr.map((value, index) => value | secondArr[index]);\n      //   for (let i = 0; i < a.length; i++) {\n      //     result[i] = a[i] | b[i];\n      //   }\n      addMarkup(result, universalArr);\n      break;\n    case 'intersection':\n      result = firstArr.map((value, index) => value & secondArr[index]);\n      addMarkup(result, universalArr);\n      break;\n\n    case 'difference':\n      result = firstArr.map((value, index) => value & !secondArr[index]);\n      addMarkup(result, universalArr);\n      break;\n    case 'symdiff':\n      result = firstArr.map((value, index) => value ^ secondArr[index]);\n      addMarkup(result, universalArr);\n      break;\n    case 'cartesianProd':\n      result = [];\n      // for (let i = 0; i < universalArr.length; i++) {\n      //   let row = [];\n      //   for (let j = 0; j < universalArr.length; j++) {\n      //     row.push([firstArr[i] * secondArr[j]]);\n      //   }\n      //   result.push(row);\n      // }\n      // firstArr.forEach(elementA => {\n      //   secondArr.forEach(elementB => {\n      //     result.push([elementA, elementB]);\n      //   });\n      // });\n      firstArr.forEach(elementA => {\n        let pairsArr = [];\n        secondArr.forEach(elementB => {\n          pairsArr.push([elementA, elementB]);\n        });\n        result.push(pairsArr);\n      });\n      // console.log(JSON.stringify(result));\n      cartesianMarkup(result, arrA, arrB);\n\n      break;\n    default:\n      console.log('Invalid subscription type');\n  }\n}\nfunction converToNum(res, arru) {\n  // let indices = [];\n  // for (let i = 0; i < arr.length; i++) {\n  //   if (arr[i] === 1) {\n  //     indices.push(i);\n  //   }\n  // }\n  // return indices;\n  return res.reduce((result, value, index) => {\n    if (value === 1) {\n      result.push(arru[index]);\n    }\n    return result;\n  }, []);\n}\nfunction cartesianConvert(result, firstArr, secondArr) {\n  let result2 = [];\n  console.log(JSON.stringify(result2));\n  for (let i = 0; i < result.length; i++) {\n    let row = [];\n    for (let j = 0; j < result[i].length; j++) {\n      let multipliedArr = [];\n      if (firstArr[i] == undefined || secondArr[j] == undefined) {\n        break;\n      } else {\n        multipliedArr[0] = firstArr[i];\n        multipliedArr[1] = secondArr[j];\n      }\n      multipliedArr.length < 2 ? stop : row.push(multipliedArr);\n    }\n    row.length < 2 ? stop : result2.push(row);\n  }\n\n  return result2;\n}\n\nfunction cartesianMarkup(result, firstArr, secondArr) {\n  let result2 = cartesianConvert(result, firstArr, secondArr);\n\n  let markup = '';\n  let rowString = '<p>[</p>\\n';\n  result2.forEach(function (subarray) {\n    markup += '  <p>[' + subarray.join(', ') + '],</p>\\n';\n  });\n  rowString += '<p>],</p>';\n  results.innerHTML = markup;\n}\nfunction addMarkup(resultt, arru) {\n  result = converToNum(resultt, arru);\n  let markup = '';\n  if (result == undefined) {\n    markup = `<p>\"Введіть дані\"/p>`;\n  }\n  markup = `<p>${result.join(',')}</p>`;\n\n  results.innerHTML = markup;\n}\n"],"names":["$0e08e03207f12047$var$form","document","querySelector","$0e08e03207f12047$var$results","$0e08e03207f12047$var$result","$0e08e03207f12047$var$converToBit","universalArr","arr","resultArr","el","push","includes","$0e08e03207f12047$var$selectType","option","arrA","arrB","firstArr","secondArr","map","value","index","$0e08e03207f12047$var$addMarkup","forEach","elementA","pairsArr","elementB","result4","result2","result3","console","log","JSON","stringify","i","length","row","j","multipliedArr","undefined","stop","$0e08e03207f12047$var$cartesianConvert","markup","rowString","subarray","join","innerHTML","$0e08e03207f12047$var$cartesianMarkup","resultt","arru","res","reduce","result1","$0e08e03207f12047$var$converToNum","addEventListener","e","preventDefault","target","split"],"version":3,"file":"secondLab.d12ffe9c.js.map"}